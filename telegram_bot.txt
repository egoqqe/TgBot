import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
import json
import os
from datetime import datetime
from config import BOT_TOKEN, EMOJIS
from FragmentApi.BuyStars import buy_stars
from Functions.LogInit import log_init
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
from config import SUPPORT_USERNAME, SUPPORT_CHAT_ID

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è FSM
user_states = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É
def send_to_support(message_text):
    # –°–ø–∏—Å–æ–∫ ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    support_ids = [SUPPORT_CHAT_ID, 339294188]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—Å–µ ID
    for chat_id in support_ids:
        try:
            bot.send_message(chat_id=chat_id, text=message_text)
            logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É: {chat_id}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É {chat_id}: {e}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ username –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    try:
        bot.send_message(chat_id=SUPPORT_USERNAME, text=message_text)
        logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É: {SUPPORT_USERNAME}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ username: {e}")



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è username
def check_username_exists(username):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ —é–∑–µ—Ä–Ω–µ–π–º–∞
    """
    try:
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        clean_username = username.lstrip('@')
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if not clean_username or len(clean_username) < 1 or len(clean_username) > 32:
            return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username"
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        import re
        if not re.match(r'^[a-zA-Z0-9_]+$', clean_username):
            return False, "Username —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã"
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ ID (—Ü–∏—Ñ—Ä—ã)
        if clean_username.isdigit():
            return False, "–≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ ID, –∞ –Ω–µ –Ω–∞ —é–∑–µ—Ä–Ω–µ–π–º"
        
        # ‚úÖ –§–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        return True, None
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ username '{username}': {e}")
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ username"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Ü–µ–Ω—ã –∑–∞ –∑–≤–µ–∑–¥—É
STAR_PRICE = 1.35  # ‚ÇΩ –∑–∞ –∑–≤–µ–∑–¥—É

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users_data():
    try:
        with open('users_data.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users_data(data):
    with open('users_data.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
def update_user_structure(user_data, user_id):
    if "stars_bought" not in user_data:
        user_data["stars_bought"] = 0
    if "subscriptions_bought" not in user_data:
        user_data["subscriptions_bought"] = 0
    if "total_spent" not in user_data:
        user_data["total_spent"] = 0.0
    if "referrals" not in user_data:
        user_data["referrals"] = []
    if "referral_earnings" not in user_data:
        user_data["referral_earnings"] = 0.0
    if "referral_withdrawn" not in user_data:
        user_data["referral_withdrawn"] = 0.0
    if "referral_code" not in user_data:
        user_data["referral_code"] = f"ref_{user_id}"
    if "purchases" not in user_data:
        user_data["purchases"] = []
    
    # –í—ã—á–∏—Å–ª—è–µ–º total_spent –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∫—É–ø–æ–∫
    if user_data["purchases"]:
        total_spent = sum(purchase.get("cost", 0) for purchase in user_data["purchases"])
        user_data["total_spent"] = total_spent
        
        # –í—ã—á–∏—Å–ª—è–µ–º stars_bought –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∫—É–ø–æ–∫
        stars_bought = sum(purchase.get("stars", 0) for purchase in user_data["purchases"])
        user_data["stars_bought"] = stars_bought
    
    return user_data

# –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def create_main_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton(f"{EMOJIS['stars']} –ó–≤–µ–∑–¥—ã", callback_data="stars"),
        InlineKeyboardButton(f"{EMOJIS['premium']} –ü—Ä–µ–º–∏—É–º", callback_data="premium")
    )
    keyboard.add(
        InlineKeyboardButton(f"{EMOJIS['topup']} –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup"),
        InlineKeyboardButton(f"{EMOJIS['profile']} –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    )
    keyboard.add(
        InlineKeyboardButton(f"{EMOJIS['info']} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")
    )
    return keyboard

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
def create_cancel_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    return keyboard

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–µ–±–µ" –∏ "–û—Ç–º–µ–Ω–∞"
def create_recipient_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üë§ –°–µ–±–µ", callback_data="recipient_self"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    )
    return keyboard

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–ù–∞–∑–∞–¥"
def create_back_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"{EMOJIS['back']} –ù–∞–∑–∞–¥", callback_data="back_main"))
    return keyboard

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
def create_confirm_purchase_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_purchase"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    )
    return keyboard

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ —Å–µ–±–µ
def create_confirm_self_purchase_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_self_purchase"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    )
    return keyboard

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
def create_profile_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="purchase_history"),
        InlineKeyboardButton(f"{EMOJIS['back']} –ù–∞–∑–∞–¥", callback_data="back_main")
    )
    return keyboard

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def create_info_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton(f"{EMOJIS['back']} –ù–∞–∑–∞–¥", callback_data="back_main")
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message: Message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or message.from_user.first_name
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_data = load_users_data()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if user_id not in users_data:
        users_data[user_id] = {
            "username": username,
            "balance": 100.0,  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            "stars_bought": 0,
            "subscriptions_bought": 0,
            "total_spent": 0.0,
            "referrals": [],
            "referral_earnings": 0.0,
            "referral_withdrawn": 0.0,
            "referral_code": f"ref_{user_id}",
            "purchases": []
        }
        save_users_data(users_data)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users_data[user_id] = update_user_structure(users_data[user_id], user_id)
        users_data[user_id]["username"] = username
        save_users_data(users_data)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states.pop(user_id, None)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥
    total_stars = sum(user.get('stars_bought', 0) for user in users_data.values())
    total_rub = total_stars * STAR_PRICE
    
    welcome_text = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\n\n"
        f"‚ú® –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ Telegram –∑–≤–µ–∑–¥—ã & premium –±–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –¥–µ—à–µ–≤–ª–µ —á–µ–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n\n"
        f"üìà –ö—É—Ä—Å: 1 Stars = {STAR_PRICE} RUB\n\n"
        f"–° –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ –∫—É–ø–ª–µ–Ω–æ:\n"
        f"{total_stars:,} ‚≠êÔ∏è (~ {total_rub:,.1f} RUB)"
    )
    
    bot.reply_to(message, welcome_text, reply_markup=create_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call: CallbackQuery):
    user_id = str(call.from_user.id)
    users_data = load_users_data()
    
    if call.data == "stars":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
        bot.edit_message_text(
            "‚≠êÔ∏è –ü–æ–∫—É–ø–∫–∞ Telegram Stars\n\n"
            f"üí∞ –¶–µ–Ω–∞: {STAR_PRICE} ‚ÇΩ –∑–∞ –∑–≤–µ–∑–¥—É\n"
            f"üí≥ –ë–∞–ª–∞–Ω—Å: {users_data.get(user_id, {}).get('balance', 0):.2f} ‚ÇΩ\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ (50-50000):",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=create_cancel_keyboard()
        )
        user_states[user_id] = {"state": "waiting_stars_amount"}
        
    elif call.data == "premium":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–æ–∫
        bot.edit_message_text(
            "üåü –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
            "üöÄ –£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞\n"
            "üíé –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
            "üéÅ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n"
            "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=create_back_keyboard()
        )
        
    elif call.data == "topup":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        bot.edit_message_text(
            "üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n"
            "üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 100 ‚ÇΩ\n"
            "üí∏ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—É–º–º–∞: 500 ‚ÇΩ\n\n"
            "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=create_back_keyboard()
        )
        
    elif call.data == "profile":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = users_data.get(user_id, {})
        user_data = update_user_structure(user_data, user_id)
        
        profile_text = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å @{user_data.get('username', 'Unknown')}\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data.get('balance', 0):.2f} ‚ÇΩ\n"
            f"‚≠êÔ∏è –ö—É–ø–ª–µ–Ω–æ –∑–≤–µ–∑–¥: {user_data.get('stars_bought', 0)}\n"
            f"üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–æ–∫: {user_data.get('subscriptions_bought', 0)}\n"
            f"üí∏ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {user_data.get('total_spent', 0):.2f} ‚ÇΩ\n"
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(user_data.get('referrals', []))}\n"
            f"üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: {user_data.get('referral_earnings', 0):.2f} ‚ÇΩ\n"
            f"üì§ –í—ã–≤–µ–¥–µ–Ω–æ: {user_data.get('referral_withdrawn', 0):.2f} ‚ÇΩ\n"
            f"üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {user_data.get('referral_code', 'ref_' + user_id)}"
        )
        
        bot.edit_message_text(
            profile_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=create_profile_keyboard()
        )
        
    elif call.data == "info":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        info_text = (
            "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n"
            "ü§ñ –ù–∞–∑–≤–∞–Ω–∏–µ: StarShop\n"
            "üí∞ –¶–µ–Ω–∞: 1.35 ‚ÇΩ –∑–∞ –∑–≤–µ–∑–¥—É\n"
            "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @StarShopsup"
        )
        
        bot.edit_message_text(
            info_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=create_info_keyboard()
        )
        
    elif call.data == "purchase_history":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫
        user_data = users_data.get(user_id, {})
        user_data = update_user_structure(user_data, user_id)
        
        purchases = user_data.get('purchases', [])
        if not purchases:
            history_text = "üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç–∞"
        else:
            history_text = "üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫:\n\n"
            for purchase in purchases[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–∫—É–ø–æ–∫
                history_text += (
                    f"üÜî #{purchase['id']} | {purchase['date']}\n"
                    f"‚≠êÔ∏è {purchase['stars']} –∑–≤–µ–∑–¥ | üí∞ {purchase['cost']:.2f} ‚ÇΩ\n"
                    f"üë§ {purchase['recipient']} | {purchase['status']}\n\n"
                )
        
        bot.edit_message_text(
            history_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=create_profile_keyboard()
        )
        

        
    elif call.data == "cancel":
        # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        user_states.pop(user_id, None)
        bot.edit_message_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=create_main_menu()
        )
        
    elif call.data == "back_main":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_states.pop(user_id, None)
        bot.edit_message_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {users_data.get(user_id, {}).get('balance', 0):.2f} ‚ÇΩ\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=create_main_menu()
        )
        
    elif call.data == "recipient_self":
        # –ü–æ–∫—É–ø–∞–µ–º –∑–≤–µ–∑–¥—ã —Å–µ–±–µ
        user_data = users_data.get(user_id, {})
        user_data = update_user_structure(user_data, user_id)
        
        stars_amount = user_states.get(user_id, {}).get('stars_amount', 0)
        
        if stars_amount == 0:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        cost = stars_amount * STAR_PRICE  # 1.35 ‚ÇΩ –∑–∞ –∑–≤–µ–∑–¥—É
        if user_data.get('balance', 0) < cost:
            bot.answer_callback_query(call.id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: {cost:.2f} ‚ÇΩ")
            return
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –°–í–û–ô —é–∑–µ—Ä–Ω–µ–π–º
        recipient = user_data['username']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â–∏–π state confirm_purchase
        user_states[user_id] = {
            "state": "confirm_purchase",
            "stars_amount": stars_amount,
            "cost": cost,
            "recipient": recipient
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_states[user_id]}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
        bot.edit_message_text(
            f"üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:\n\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{recipient}\n"
            f"‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stars_amount} –∑–≤–µ–∑–¥\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost:.2f} ‚ÇΩ\n\n"
            f"üîê –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=create_confirm_purchase_keyboard()
        )
        
    elif call.data == "confirm_purchase":
        user_data = users_data.get(user_id, {})
        user_data = update_user_structure(user_data, user_id)
        purchase_data = user_states.get(user_id, {})

        if not purchase_data or purchase_data.get("state") != "confirm_purchase":
            bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞")
            bot.edit_message_text(
                "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=create_main_menu()
            )
            user_states.pop(user_id, None)
            return

        stars_amount = purchase_data["stars_amount"]
        cost = purchase_data["cost"]
        recipient = purchase_data["recipient"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ username –µ—â—ë —Ä–∞–∑
        username_exists, error_message = check_username_exists(recipient)
        if not username_exists:
            bot.answer_callback_query(call.id, f"‚ùå {error_message}")
            bot.edit_message_text(
                f"‚ùå {error_message}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è username –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=create_back_keyboard()
            )
            user_states.pop(user_id, None)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ (–µ—â—ë —Ä–∞–∑)
        if user_data.get('balance', 0) < cost:
            bot.answer_callback_query(call.id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            bot.edit_message_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: {cost:.2f} ‚ÇΩ",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=create_back_keyboard()
            )
            user_states.pop(user_id, None)
            return

        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–Ω–µ–º–æ–Ω–∏–∫–∏
        wallet_file = "created_wallets/wallets_data.txt"
        if not os.path.exists(wallet_file):
            bot.edit_message_text(
                "‚ùå –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=create_back_keyboard()
            )
            user_states.pop(user_id, None)
            return

        try:
            with open(wallet_file, "r", encoding="utf-8") as f:
                wallet_data = json.load(f)
                mnemonics = wallet_data['mnemonics']
                wallet_address = wallet_data['wallet_address']
                logging.info(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω: {wallet_address}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–∞: {e}")
            bot.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–∞: {e}",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=create_back_keyboard()
            )
            user_states.pop(user_id, None)
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        bot.edit_message_text(
            f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {stars_amount} –∑–≤—ë–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{recipient}...",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=None
        )

        try:
            import asyncio
            result = asyncio.run(
                buy_stars(
                    recipient=recipient,
                    amount=stars_amount,
                    mnemonics=mnemonics,
                    version='v4r2',
                    testnet=False,
                    send_mode=1,
                    test_mode=False
                )
            )
            logging.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫—É–ø–∫–∏: {result}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ
            success = False
            if isinstance(result, bool):
                success = result
            elif isinstance(result, dict):
                success = result.get('success', False)
            else:
                success = bool(result)
            
            if success:
                # –£—Å–ø–µ—à–Ω–æ
                user_data['balance'] -= cost
                user_data['stars_bought'] += stars_amount
                user_data['total_spent'] += cost
                user_data['purchases'].append({
                    "id": len(user_data['purchases']) + 1,
                    "date": datetime.now().strftime("%d.%m.%Y %H:%M"),
                    "stars": stars_amount,
                    "cost": cost,
                    "recipient": f"@{recipient}",
                    "status": "completed"
                })
                users_data[user_id] = user_data
                save_users_data(users_data)

                bot.edit_message_text(
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ! {stars_amount} –∑–≤—ë–∑–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{recipient}\n"
                    f"üí∏ –°–ø–∏—Å–∞–Ω–æ: {cost:.2f} ‚ÇΩ",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=create_back_keyboard()
                )
            else:
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
                error_details = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                if isinstance(result, dict):
                    error_details = result.get('error', result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
                elif isinstance(result, str):
                    error_details = result
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º username
                if isinstance(result, dict) and "username" in error_details.lower():
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º username
                    bot.edit_message_text(
                        "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.",
                        call.message.chat.id,
                        call.message.message_id,
                        reply_markup=create_back_keyboard()
                    )
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Ç–æ–ª—å–∫–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
                    support_message = (
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥!\n"
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
                        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{recipient}\n"
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: {stars_amount}\n"
                        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost:.2f} ‚ÇΩ\n"
                        f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_details}"
                    )
                    send_to_support(support_message)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    bot.edit_message_text(
                        "–ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É @StarShopsup",
                        call.message.chat.id,
                        call.message.message_id,
                        reply_markup=create_back_keyboard()
                    )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            support_message = (
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥!\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
                f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{recipient}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: {stars_amount}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost:.2f} ‚ÇΩ\n"
                f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}"
            )
            send_to_support(support_message)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.edit_message_text(
                "–ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É @StarShopsup",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=create_back_keyboard()
            )

        user_states.pop(user_id, None)



    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    bot.answer_callback_query(call.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_text(message: Message):
    user_id = str(message.from_user.id)
    user_state = user_states.get(user_id, {})
    users_data = load_users_data()
    user_data = users_data.get(user_id, {})
    user_data = update_user_structure(user_data, user_id)

    if user_state.get("state") == "waiting_stars_amount":
        try:
            stars_amount = int(message.text)
            if 50 <= stars_amount <= 50000:
                cost = stars_amount * STAR_PRICE
                if user_data.get('balance', 0) < cost:
                    bot.reply_to(
                        message,
                        f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: {cost:.2f} ‚ÇΩ",
                        reply_markup=create_cancel_keyboard()
                    )
                    return
                user_states[user_id] = {
                    "state": "waiting_recipient_username",
                    "stars_amount": stars_amount,
                    "cost": cost
                }
                bot.reply_to(
                    message,
                    f"‚≠êÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stars_amount} –∑–≤–µ–∑–¥\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost:.2f} ‚ÇΩ\n"
                    "üë§ –í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username –∏–ª–∏ username):",
                    reply_markup=create_recipient_keyboard()
                )
            else:
                bot.reply_to(
                    message,
                    "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 50 –¥–æ 50000!",
                    reply_markup=create_cancel_keyboard()
                )
        except ValueError:
            bot.reply_to(
                message,
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!",
                reply_markup=create_cancel_keyboard()
            )

    elif user_state.get("state") == "waiting_recipient_username":
        recipient = message.text.strip().lstrip('@')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ username
        username_exists, error_message = check_username_exists(recipient)
        if not username_exists:
            bot.reply_to(
                message,
                f"‚ùå {error_message}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è username –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=create_cancel_keyboard()
            )
            return

        stars_amount = user_state["stars_amount"]
        cost = user_state["cost"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        user_states[user_id] = {
            "state": "confirm_purchase",
            "stars_amount": stars_amount,
            "cost": cost,
            "recipient": recipient
        }

        keyboard = create_confirm_purchase_keyboard()
        bot.reply_to(
            message,
            f"üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:\n"
            f"‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stars_amount} –∑–≤—ë–∑–¥\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost:.2f} ‚ÇΩ\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{recipient}\n"
            f"üîê –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?",
            reply_markup=keyboard
        )

    else:
        bot.reply_to(
            message,
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            reply_markup=create_main_menu()
        )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_init()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print(f"üë§ Username: @{bot.get_me().username}")
    bot.polling(none_stop=True)
            