# wallet/Transactions.py
import logging
import requests

# --- –ò–º–ø–æ—Ä—Ç TonTools –¥–ª—è –≤–µ—Ä—Å–∏–∏ 2.1.2 ---
TONTOOLS_AVAILABLE = False
Wallet = None
TonCenterClient = None

try:
    from TonTools import Wallet, TonCenterClient
    TONTOOLS_AVAILABLE = True
    logging.info("‚úÖ TonTools (–≤–µ—Ä—Å–∏—è 2.1.2) –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError as e:
    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å TonTools: {e}")
    logging.warning("‚ö†Ô∏è TonTools –ù–ï–î–û–°–¢–£–ü–ï–ù.")

import asyncio
from tonsdk.utils import from_nano, to_nano
from tonsdk.contract.wallet import Wallets, WalletVersionEnum


class Transactions:
    def __init__(self, config):
        self.config = config
        self.testnet = config.get('testnet', False)
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ TON_CENTER_API_URL –∏ TON_CENTER_API_KEY –¥–æ—Å—Ç—É–ø–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ –∏–ª–∏ —á–µ—Ä–µ–∑ config
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏—Ö –≤ config –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ config.py
        # –ó–¥–µ—Å—å –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã, –∫–∞–∫ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ
        try:
            from config import TON_CENTER_API_URL, TON_CENTER_API_KEY
            self.ton_center_api_url = TON_CENTER_API_URL.rstrip('/') # –£–±–∏—Ä–∞–µ–º —Å–ª—ç—à –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            self.ton_center_api_key = TON_CENTER_API_KEY
        except ImportError:
            logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å TON_CENTER_API_URL –∏–ª–∏ TON_CENTER_API_KEY –∏–∑ config.py")
            self.ton_center_api_url = "https://toncenter.com/api/v2"
            self.ton_center_api_key = None

    async def get_balance(self, mnemonics, version='v4r2'):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å TON –∫–æ—à–µ–ª—å–∫–∞.
        """
        if not TONTOOLS_AVAILABLE:
            logging.error("‚ùå TonTools –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.")
            return {"success": False, "message": "TonTools –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "error": "TonTools library not available", "balance_ton": 0}

        try:
            # 1. –°–æ–∑–¥–∞–µ–º –∫–æ—à–µ–ª–µ–∫ –∏–∑ –º–Ω–µ–º–æ–Ω–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
            wallet_version_enum = getattr(WalletVersionEnum, version, WalletVersionEnum.v4r2)
            _, _, _, wallet_obj = Wallets.from_mnemonics(mnemonics=mnemonics, version=wallet_version_enum, workchain=0)
            wallet_address = wallet_obj.address.to_string(True, True, True)
            logging.info(f"üëõ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {wallet_address}")

            # 2. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ TON Center API
            balance_url = f"{self.ton_center_api_url}/getAddressBalance"
            # –í–ê–ñ–ù–û: params –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º, –∏ api_key –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω–µ "YOUR_API_KEY_HERE"
            balance_params = {'address': wallet_address}
            if self.ton_center_api_key and self.ton_center_api_key != "YOUR_API_KEY_HERE":
                 balance_params['api_key'] = self.ton_center_api_key
            elif self.ton_center_api_key == "YOUR_API_KEY_HERE":
                 logging.warning("‚ö†Ô∏è TON Center API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ config.py!")

            logging.info(f"üì° –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞: GET {balance_url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {balance_params}")
            balance_response = requests.get(balance_url, params=balance_params)

            if balance_response.status_code == 200:
                balance_data = balance_response.json()
                logging.info(f"üì• –û—Ç–≤–µ—Ç TON Center API (–±–∞–ª–∞–Ω—Å): {balance_data}")
                if balance_data.get("ok"):
                    balance_nano = int(balance_data["result"])
                    balance_ton = from_nano(balance_nano, "ton")
                    logging.info(f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {balance_ton} TON ({balance_nano} –Ω–∞–Ω–æ—Ç–æ–Ω)")
                    return {"success": True, "message": "–ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω", "balance_ton": balance_ton, "balance_nano": balance_nano}
                else:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ—Ç TON Center API: {balance_data}"
                    logging.error(error_msg)
                    return {"success": False, "message": "–û—à–∏–±–∫–∞ API", "error": error_msg, "balance_ton": 0}
            else:
                error_msg = f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {balance_response.status_code}, {balance_response.text}"
                logging.error(error_msg)
                return {"success": False, "message": "HTTP –æ—à–∏–±–∫–∞", "error": error_msg, "balance_ton": 0}

        except Exception as e:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ get_balance: {e}", exc_info=True)
            return {"success": False, "message": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", "error": str(e), "balance_ton": 0}


    async def _send_ton_async(self, mnemonics, destination_address, amount, payload="", nano_amount=True, version='v4r2', send_mode=0):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç TON –∏—Å–ø–æ–ª—å–∑—É—è TonTools 2.1.2.
        """
        if not TONTOOLS_AVAILABLE:
            logging.error("‚ùå TonTools –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
            return {"success": False, "message": "TonTools –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "error": "TonTools library not available"}

        try:
            # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã
            try:
                if nano_amount:
                    amount_nano = int(amount) # amount —É–∂–µ –≤ –Ω–∞–Ω–æ—Ç–æ–Ω–∞—Ö (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ int)
                    amount_ton = from_nano(amount_nano, 'ton')
                else:
                    amount_ton = float(amount) # amount –≤ TON (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ float)
                    amount_nano = to_nano(amount_ton, 'ton')
            except (ValueError, TypeError) as e:
                logging.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã: {e}")
                return {"success": False, "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã", "error": str(e)}

            logging.info(f"üí∞ –°—É–º–º–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ: {amount_ton} TON ({amount_nano} –Ω–∞–Ω–æ—Ç–æ–Ω)")

            # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ payload (comment)
            clean_payload = payload.replace("\n", " ") if payload else ""
            logging.info(f"üìÑ Payload (comment): {clean_payload}")

            # 3. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏ –∫–æ—à–µ–ª–µ–∫
            provider = TonCenterClient(testnet=self.testnet)
            wallet = Wallet(mnemonics=mnemonics, version=version, provider=provider)

            # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            logging.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ {amount_ton} TON –Ω–∞ {destination_address}...")
            
            # –í TonTools 2.1.2 –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API
            result = await wallet.transfer_ton(
                destination_address=destination_address,
                amount=amount_ton,  # –°—É–º–º–∞ –≤ TON
                message=clean_payload,
                send_mode=send_mode
            )
            
            logging.info("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —Ö—ç—à
            tx_hash = "unknown"
            if isinstance(result, dict):
                tx_hash = result.get('hash') or result.get('@extra') or str(result)
            elif hasattr(result, 'hash'):
                tx_hash = result.hash
            
            return {"success": True, "message": "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", "tx_hash": tx_hash}
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ _send_ton_async: {e}", exc_info=True)
            return {"success": False, "message": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", "error": str(e)}

    async def send_ton(self, mnemonics, destination_address, amount, payload="", nano_amount=True, version='v4r2', send_mode=0):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ TON.
        –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç.
        """
        logging.info("üí∏ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (TonTools 2.1.2)...")

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ amount —É–∂–µ –≤ –Ω–∞–Ω–æ—Ç–æ–Ω–∞—Ö, –µ—Å–ª–∏ nano_amount=True
        try:
            if nano_amount:
                required_amount_nano = int(amount)
            else:
                required_amount_nano = to_nano(float(amount), 'ton')
        except (ValueError, TypeError) as e:
            logging.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return {"success": False, "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã", "error": str(e)}

        required_amount_ton = from_nano(required_amount_nano, 'ton')
        # –î–æ–±–∞–≤–∏–º –Ω–µ–º–Ω–æ–≥–æ –Ω–∞ –∫–æ–º–∏—Å—Å–∏—é (–ø—Ä–∏–º–µ—Ä–Ω–æ 0.05 TON)
        estimated_fee_nano = to_nano(0.07, 'ton')
        total_required_nano = required_amount_nano + estimated_fee_nano
        total_required_ton = from_nano(total_required_nano, 'ton')

        logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: —Ç—Ä–µ–±—É–µ—Ç—Å—è {total_required_ton} TON (—Å—É–º–º–∞ + –∫–æ–º–∏—Å—Å–∏—è)")

        balance_result = await self.get_balance(mnemonics, version)
        if not balance_result.get('success'):
             logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: {balance_result}")
             return balance_result # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞

        current_balance_ton = balance_result.get('balance_ton', 0)
        current_balance_nano = balance_result.get('balance_nano', 0)

        logging.info(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance_ton} TON")
        logging.info(f"üí∞ –¢—Ä–µ–±—É–µ—Ç—Å—è: {total_required_ton} TON")

        if current_balance_nano < total_required_nano:
            error_msg = (f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ TON –∫–æ—à–µ–ª—å–∫–µ. "
                         f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {total_required_ton} TON, "
                         f"–î–æ—Å—Ç—É–ø–Ω–æ: {current_balance_ton} TON")
            logging.error(f"‚ùå {error_msg}")
            return {"success": False, "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", "error": error_msg}

        logging.info("‚úÖ –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")

        # 2. –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        result = await self._send_ton_async(mnemonics, destination_address, amount, payload, nano_amount, version, send_mode)
        return result
