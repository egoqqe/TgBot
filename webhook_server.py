#!/usr/bin/env python3
"""
Webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç APays
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import json
import logging
from flask import Flask, request, jsonify
from FragmentApi.APaysPayment import APaysPayment
from config import APAYS_CLIENT_ID, APAYS_SECRET_KEY, APAYS_BASE_URL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è APays –∫–ª–∏–µ–Ω—Ç–∞
apays = APaysPayment(
    client_id=APAYS_CLIENT_ID,
    secret_key=APAYS_SECRET_KEY,
    base_url=APAYS_BASE_URL
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞—Ç–µ–∂–∞—Ö (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
pending_payments = {}


@app.route('/webhook/apays', methods=['POST'])
def apays_webhook():
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç APays
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ webhook
        webhook_data = request.get_json()
        
        if not webhook_data:
            logger.error("‚ùå –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ webhook")
            return jsonify({'error': 'Empty webhook data'}), 400
        
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç APays: {webhook_data}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook
        result = apays.process_webhook(webhook_data)
        
        if result['success']:
            order_id = result['order_id']
            status = result['status']
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            
            if status == 'approved':
                logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–¥–æ–±—Ä–µ–Ω: {order_id}")
                # TODO: –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                
            elif status == 'declined':
                logger.info(f"‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω: {order_id}")
                # TODO: –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
                
            return jsonify({'status': 'ok'}), 200
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {result['message']}")
            return jsonify({'error': result['message']}), 400
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ webhook: {e}")
        return jsonify({'error': 'Internal server error'}), 500


@app.route('/health', methods=['GET'])
def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
    """
    return jsonify({'status': 'ok', 'service': 'apays-webhook'})


@app.route('/', methods=['GET'])
def index():
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    """
    return jsonify({
        'service': 'APays Webhook Server',
        'version': '1.0.0',
        'endpoints': {
            'webhook': '/webhook/apays',
            'health': '/health'
        }
    })


if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è APays...")
    logger.info(f"üì° Webhook URL: http://localhost:5000/webhook/apays")
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.run(
        host='0.0.0.0',
        port=5000,
        debug=False,
        threaded=True
    )


