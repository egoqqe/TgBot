"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä—è–º—ã—Ö TON –ø–µ—Ä–µ–≤–æ–¥–æ–≤
"""
import requests
import time
import logging
from typing import Dict, Optional, List
from config import TON_WALLET_ADDRESS, TON_COMMISSION_PERCENT, TON_CENTER_API_KEY, TON_CENTER_API_URL

class TonPayment:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä—è–º—ã–º–∏ TON –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏"""
    
    def __init__(self):
        self.wallet_address = TON_WALLET_ADDRESS
        self.commission_percent = TON_COMMISSION_PERCENT
        self.api_key = TON_CENTER_API_KEY
        self.api_url = TON_CENTER_API_URL
        logging.info("‚úÖ TON Payment –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_wallet_transactions(self, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ TON Center API"""
        try:
            headers = {
                'X-API-Key': self.api_key
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            response = requests.get(
                f"{self.api_url}/getTransactions",
                params={
                    'address': self.wallet_address,
                    'limit': limit,
                    'archival': True
                },
                headers=headers
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    return data.get('result', [])
                else:
                    logging.error(f"TON Center API error: {data.get('error', 'Unknown error')}")
                    return []
            else:
                logging.error(f"TON Center API HTTP error: {response.status_code}")
                return []
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
            return []
    
    def rubles_to_ton(self, rubles: float) -> float:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä—É–±–ª–∏ –≤ TON –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å TON –∫ —Ä—É–±–ª—é
            response = requests.get("https://api.coingecko.com/api/v3/simple/price?ids=the-open-network&vs_currencies=rub")
            if response.status_code == 200:
                data = response.json()
                ton_price_rub = data.get("the-open-network", {}).get("rub", 0)
                if ton_price_rub > 0:
                    ton_amount = rubles / ton_price_rub
                    return round(ton_amount, 4)
            
            # Fallback –∫—É—Ä—Å (–ø—Ä–∏–º–µ—Ä–Ω–æ 200 —Ä—É–±–ª–µ–π –∑–∞ TON)
            fallback_rate = 200
            return round(rubles / fallback_rate, 4)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ TON: {e}")
            # Fallback –∫—É—Ä—Å
            fallback_rate = 200
            return round(rubles / fallback_rate, 4)
    
    def ton_to_rubles(self, ton_amount: float) -> float:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç TON –≤ —Ä—É–±–ª–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É"""
        try:
            response = requests.get("https://api.coingecko.com/api/v3/simple/price?ids=the-open-network&vs_currencies=rub")
            if response.status_code == 200:
                data = response.json()
                ton_price_rub = data.get("the-open-network", {}).get("rub", 0)
                if ton_price_rub > 0:
                    return round(ton_amount * ton_price_rub, 2)
            
            # Fallback –∫—É—Ä—Å
            fallback_rate = 200
            return round(ton_amount * fallback_rate, 2)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ TON: {e}")
            fallback_rate = 200
            return round(ton_amount * fallback_rate, 2)
    
    def create_payment_request(self, user_id: int, amount_rub: float) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ TON"""
        try:
            ton_amount = self.rubles_to_ton(amount_rub)
            payment_id = f"ton_{user_id}_{int(time.time())}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ü–∏—Ñ—Ä—ã user_id + –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ü–∏—Ñ—Ä—ã timestamp –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            user_suffix = str(user_id)[-3:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ü–∏—Ñ—Ä—ã user_id
            time_suffix = str(int(time.time()))[-3:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ü–∏—Ñ—Ä—ã timestamp
            comment = f"T{user_suffix}{time_suffix}"  # –ù–∞–ø—Ä–∏–º–µ—Ä: T188065
            
            payment_data = {
                "payment_id": payment_id,
                "user_id": user_id,
                "amount_rub": amount_rub,
                "amount_ton": ton_amount,
                "wallet_address": self.wallet_address,
                "commission_percent": self.commission_percent,
                "comment": comment,
                "status": "pending",
                "created_at": int(time.time())
            }
            
            logging.info(f"üì° TON –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: {payment_id}, {amount_rub} RUB = {ton_amount} TON, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
            return payment_data
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TON –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {"error": str(e)}
    
    def check_ton_transaction(self, payment_id: str, expected_comment: str = None) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ TON –Ω–∞ –∫–æ—à–µ–ª–µ–∫ –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transactions = self.get_wallet_transactions(50)
            
            if transactions:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç
                current_time = int(time.time())
                
                logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
                logging.info(f"üîç –û–∂–∏–¥–∞–µ–º—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {expected_comment}")
                
                for tx in transactions:
                    if tx.get("in_msg"):
                        in_msg = tx["in_msg"]
                        if in_msg.get("value"):
                            received_amount = int(in_msg["value"]) / 1000000000
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç)
                            tx_time = tx.get("utime", 0)
                            if current_time - tx_time < 1800:  # 30 –º–∏–Ω—É—Ç
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                                tx_comment = in_msg.get("message", "")
                                
                                logging.info(f"üîç –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: —Å—É–º–º–∞ {received_amount:.4f} TON, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{tx_comment}', –≤—Ä–µ–º—è: {tx_time}")
                                
                                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –æ–∂–∏–¥–∞–µ–º—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ
                                if expected_comment and expected_comment in tx_comment:
                                    logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: {expected_comment}, —Å—É–º–º–∞: {received_amount:.4f} TON")
                                    return {
                                        "status": "approved",
                                        "amount": received_amount,
                                        "comment": tx_comment,
                                        "expected_comment": expected_comment,
                                        "transaction": tx
                                    }
                                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏—â–µ–º –ø–ª–∞—Ç–µ–∂–∏ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ (–Ω–∞—á–∏–Ω–∞—é—â–∏–º–∏—Å—è —Å T)
                                elif expected_comment and expected_comment.startswith("T") and tx_comment.startswith("T") and len(tx_comment) >= 4:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã
                                    if expected_comment[-3:] in tx_comment or tx_comment[-3:] in expected_comment:
                                        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂ —Å –ø–æ—Ö–æ–∂–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: {tx_comment} (–æ–∂–∏–¥–∞–ª—Å—è: {expected_comment}), —Å—É–º–º–∞: {received_amount:.4f} TON")
                                        return {
                                            "status": "approved",
                                            "amount": received_amount,
                                            "comment": tx_comment,
                                            "expected_comment": expected_comment,
                                            "transaction": tx
                                        }
                                elif not expected_comment and received_amount > 0:
                                    # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–µ–º –ª—é–±–æ–π –≤—Ö–æ–¥—è—â–∏–π –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω—ã–º
                                    logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, —Å—É–º–º–∞: {received_amount:.4f} TON")
                                    return {
                                        "status": "approved",
                                        "amount": received_amount,
                                        "comment": tx_comment,
                                        "transaction": tx
                                    }
            
            logging.info(f"‚è≥ –ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            return {
                "status": "pending",
                "message": "–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ TON —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º"
            }
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            return {"status": "error", "error": str(e)}
    
    def get_wallet_qr_code(self, amount_ton: float) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR –∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ TON –∫–æ—à–µ–ª—å–∫–µ
        ton_link = f"ton://transfer/{self.wallet_address}?amount={int(amount_ton * 1000000000)}"
        return ton_link
    
    def get_wallet_info(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ"""
        try:
            return {
                "address": self.wallet_address,
                "commission_percent": self.commission_percent,
                "api_configured": bool(self.api_key and self.api_url)
            }
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ: {e}")
            return None
    
    def format_payment_info(self, payment_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ"""
        return f"""
üìã –ü–ª–∞—Ç–µ–∂ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω

üí∏ –°—É–º–º–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ: {payment_data['amount_ton']:.4f} TON
‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{payment_data['comment']}</code>
üí≥ –ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã: <code>{self.wallet_address}</code>

‚ÄºÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–æ–Ω–µ—Ç, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω–æ
‚ÄºÔ∏è –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –≤ –º–æ–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–µ—Ç

üì± –î–ª—è –æ–ø–ª–∞—Ç—ã:
1. –û—Ç–∫—Ä–æ–π—Ç–µ TON –∫–æ—à–µ–ª–µ–∫
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ {payment_data['amount_ton']:.4f} TON –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
3. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ: <code>{payment_data['comment']}</code>
4. –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É" –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        """.strip()
