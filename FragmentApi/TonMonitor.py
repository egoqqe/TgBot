"""
–ú–æ–¥—É–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
"""
import requests
import time
import logging
from typing import Dict, List, Optional
from config import TON_WALLET_ADDRESS

class TonMonitor:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    
    def __init__(self):
        self.wallet_address = TON_WALLET_ADDRESS
        self.api_url = "https://toncenter.com/api/v2"
        logging.info("‚úÖ TON Monitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_wallet_transactions(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º TON Center API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            url = f"{self.api_url}/getTransactions"
            params = {
                "address": self.wallet_address,
                "limit": limit,
                "archival": True
            }
            
            response = requests.get(url, params=params, timeout=10)
            if response.status_code == 200:
                data = response.json()
                if data.get("ok"):
                    return data.get("result", [])
                else:
                    logging.error(f"TON Center API error: {data.get('error', 'Unknown error')}")
                    return []
            else:
                logging.error(f"TON Center API HTTP error: {response.status_code}")
                return []
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
            return []
    
    def check_payment_by_amount(self, expected_amount_ton: float, tolerance: float = 0.001) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ —Å—É–º–º–µ"""
        try:
            transactions = self.get_wallet_transactions(20)
            
            for tx in transactions:
                if tx.get("in_msg"):
                    in_msg = tx["in_msg"]
                    if in_msg.get("value"):
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º nanoTON –≤ TON
                        received_amount = int(in_msg["value"]) / 1000000000
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º—ã —Å –¥–æ–ø—É—Å–∫–æ–º
                        if abs(received_amount - expected_amount_ton) <= tolerance:
                            return {
                                "status": "approved",
                                "transaction": tx,
                                "amount": received_amount,
                                "from_address": in_msg.get("source", ""),
                                "tx_hash": tx.get("transaction_id", {}).get("hash", "")
                            }
            
            return {"status": "not_found"}
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ TON –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {"status": "error", "error": str(e)}
    
    def format_transaction_info(self, tx_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        if tx_data.get("status") == "approved":
            tx = tx_data.get("transaction", {})
            in_msg = tx.get("in_msg", {})
            
            return f"""
‚úÖ TON –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!

üí∞ –°—É–º–º–∞: {tx_data['amount']:.4f} TON
üì§ –û—Ç: {tx_data['from_address'][:10]}...{tx_data['from_address'][-10:]}
üîó –•–µ—à: {tx_data['tx_hash'][:20]}...
‚è∞ –í—Ä–µ–º—è: {time.strftime('%H:%M:%S', time.localtime())}
            """.strip()
        
        return "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"
