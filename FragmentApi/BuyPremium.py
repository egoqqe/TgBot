from FragmentApi.PaymentGetPremium import PaymentGetPremium
from wallet.Transactions import Transactions
import logging
from config import TON_CENTER_API_KEY, TON_CENTER_API_URL, TON_NETWORK


async def buy_premium(recipient, duration_months, mnemonics, version="v4r2", testnet=False, send_mode=1, test_mode=False):
    """
    –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ Telegram Premium.
    
    Args:
        recipient: –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–±–µ–∑ @)
        duration_months: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –º–µ—Å—è—Ü–∞—Ö (1, 3, 6, 12)
        mnemonics: –º–Ω–µ–º–æ–Ω–∏–∫–∞ –∫–æ—à–µ–ª—å–∫–∞
        version: –≤–µ—Ä—Å–∏—è –∫–æ—à–µ–ª—å–∫–∞
        testnet: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å testnet
        send_mode: —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏
        test_mode: —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    """
    try:
        logging.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫—É–ø–∫—É {duration_months} –º–µ—Å—è—Ü–µ–≤ Premium –¥–ª—è @{recipient}")
        
        payment = PaymentGetPremium()
        
        # –°–æ–∑–¥–∞–µ–º config –¥–ª—è Transactions
        config = {
            'testnet': testnet,
            'TON_NETWORK': 'mainnet' if not testnet else 'testnet'
        }
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Transactions —Å config
        transactions = Transactions(config)
        
        logging.info("üì° –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ Premium...")
        try:
            payment_address, payment_amount, payload = payment.get_data_for_payment(
                recipient=recipient, 
                duration_months=duration_months,
                mnemonics=mnemonics
            )
        except Exception as payment_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞: {payment_error}")
            return {"success": False, "error": str(payment_error)}
        
        if not payment_address or not payment_amount:
            logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ Premium –æ—Ç Fragment API")
            return False

        logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: –∞–¥—Ä–µ—Å={payment_address}, —Å—É–º–º–∞={payment_amount}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ê–°–ò–ù–•–†–û–ù–ù–û
        logging.info("üí∏ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è Premium...")
        ton_result = await transactions.send_ton(
            mnemonics=mnemonics,
            destination_address=payment_address,
            amount=payment_amount,
            payload=payload,
            nano_amount=True,  # PaymentGet –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç amount –≤ –Ω–∞–Ω–æ—Ç–æ–Ω–∞—Ö
            version=version,
            send_mode=send_mode
        )
        
        logging.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ Premium: {ton_result}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not ton_result.get("success"):
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ TON –¥–ª—è Premium: {ton_result}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –≤–º–µ—Å—Ç–æ False
            # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –±–æ—Ç—É –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏
            return ton_result
        else:
            return True
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ Premium: {e}")
        return {"success": False, "error": str(e)}
