import requests
from re import search
import logging
from wallet.WalletUtils import WalletUtils
from urllib.parse import urlencode
import json
import base64


class PaymentGetPremium:
    def __init__(self):
        self.WalletUtils = WalletUtils()
        with open('cookies.json', 'r') as file:
            loaded_cookies = json.load(file)

        self.cookies = loaded_cookies
        self.headers = {
            "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
            "Referer": "https://fragment.com/stars/buy",
            "X-Requested-With": "XMLHttpRequest",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36 OPR/117.0.0.0 (Edition Yx GX)"
        }

    def _hash_get(self):
        response = requests.get("https://fragment.com/stars/buy", cookies=self.cookies)
        if response.status_code == 200:
            return search(r'api\?hash=([a-zA-Z0-9]+)', response.text).group(1)

    def _update_url(self):
        return f"https://fragment.com/api?hash={self._hash_get()}"

    def _payload_get(self, req_id, mnemonics):
        payload = {
            "account": json.dumps({
                "chain": "-239",
                "publicKey": self.WalletUtils.wallet_from_mnemonics(mnemonics)[0]["public_key"]
            }),
            "device": json.dumps({
                "platform": "web",
                "appName": "telegram-wallet",
                "appVersion": "1",
                "maxProtocolVersion": 2,
                "features": ["SendTransaction", {"name": "SendTransaction", "maxMessages": 4}]
            }),
            "transaction": 1,
            "id": req_id,
            "show_sender": 0,
            "method": "getBuyStarsLink"
        }
        return urlencode(payload)

    @staticmethod
    def _message_decode(encoded_payload):
        padding_needed = len(encoded_payload) % 4
        if padding_needed != 0:
            encoded_payload += '=' * (4 - padding_needed)
        decoded_payload = base64.b64decode(encoded_payload)
        text_part = decoded_payload.split(b"\x00")[-1].decode("utf-8")

        return text_part

    def get_data_for_payment(self, recipient, duration_months, mnemonics):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ Telegram Premium
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ API, —á—Ç–æ –∏ –¥–ª—è –∑–≤–µ–∑–¥, –Ω–æ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ Premium
        
        Args:
            recipient: –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–±–µ–∑ @)
            duration_months: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –º–µ—Å—è—Ü–∞—Ö (1, 3, 6, 12)
            mnemonics: –º–Ω–µ–º–æ–Ω–∏–∫–∞ –∫–æ—à–µ–ª—å–∫–∞
        """
        logging.warning(f"Sending {duration_months} months premium to @{recipient}...")

        url = self._update_url()

        # –ü–æ–∏—Å–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –∑–≤–µ–∑–¥
        recipient_id_dirt = requests.post(url, headers=self.headers, cookies=self.cookies,
                                          data=f"query={recipient}&quantity=&method=searchStarsRecipient")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        logging.info(f"üì° –û—Ç–≤–µ—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {recipient_id_dirt.text}")
        
        recipient_response = recipient_id_dirt.json()
        logging.info(f"üìä JSON –æ—Ç–≤–µ—Ç –ø–æ–∏—Å–∫–∞: {recipient_response}")
        
        recipient_id = recipient_response.get("found", {}).get("recipient", "")

        if not recipient_id:
            logging.error(f"‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å @{recipient} –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–≤–µ—Ç API: {recipient_response}")
            raise Exception(f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å @{recipient} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –∑–≤–µ–∑–¥, –Ω–æ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ Premium
        # –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å duration_months –∫–∞–∫ quantity
        req_id_dirt = requests.post(url, headers=self.headers, cookies=self.cookies,
                                    data=f"recipient={recipient_id}&quantity={duration_months}&method=initBuyStarsRequest")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        logging.info(f"üì° –û—Ç–≤–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {req_id_dirt.text}")
        
        init_response = req_id_dirt.json()
        logging.info(f"üìä JSON –æ—Ç–≤–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {init_response}")
        
        req_id = init_response.get("req_id", "")

        if not req_id:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å req_id –¥–ª—è –ø–æ–∫—É–ø–∫–∏ Premium. –û—Ç–≤–µ—Ç: {init_response}")
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É Premium")

        encoded_payload = self._payload_get(req_id, mnemonics)

        buy_payload_dirt = requests.post(url, headers=self.headers, cookies=self.cookies, data=encoded_payload)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logging.info(f"üì° –û—Ç–≤–µ—Ç Fragment API –¥–ª—è Premium: {buy_payload_dirt.text}")
        
        response_json = buy_payload_dirt.json()
        logging.info(f"üìä JSON –æ—Ç–≤–µ—Ç –¥–ª—è Premium: {response_json}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if "transaction" in response_json and "messages" in response_json["transaction"]:
            buy_payload = response_json["transaction"]["messages"][0]
        elif "messages" in response_json:
            buy_payload = response_json["messages"][0]
        else:
            # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥—Ä—É–≥–∞—è, –∏—â–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
            logging.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è Premium: {response_json}")
            raise Exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ Fragment API –¥–ª—è Premium: {response_json}")

        address, amount, encoded_message = buy_payload["address"], buy_payload["amount"], buy_payload["payload"]
        payload = self._message_decode(encoded_message)
        logging.info("Premium payment data received!")
        logging.warning("Waiting to send transaction...")
        return address, amount, payload
