import requests
import hashlib
import logging
import json
import time
from typing import Dict, Any, Optional


class APaysPayment:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å APays API
    –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://docs.apays.io/lets-start/api
    """
    
    def __init__(self, client_id: int, secret_key: str, base_url: str = "https://apays.io"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è APays –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç APays
            secret_key: –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç APays
            base_url: –ë–∞–∑–æ–≤—ã–π URL API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é https://apays.io)
        """
        self.client_id = client_id
        self.secret_key = secret_key
        self.base_url = base_url.rstrip('/')
        self.session = requests.Session()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        self.session.headers.update({
            'User-Agent': 'FragmentBot/1.0',
            'Accept': 'application/json'
        })
        
        logging.info("‚úÖ APays –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _generate_sign(self, order_id: str, amount: Optional[int] = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞
            amount: –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            MD5 –ø–æ–¥–ø–∏—Å—å
        """
        if amount is not None:
            # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: md5(order_id:amount:secret_key)
            sign_string = f"{order_id}:{amount}:{self.secret_key}"
        else:
            # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: md5(order_id:secret_key)
            sign_string = f"{order_id}:{self.secret_key}"
        
        return hashlib.md5(sign_string.encode('utf-8')).hexdigest()
    
    def create_order(self, order_id: str, amount: int, callback_url: str = "") -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –æ–ø–ª–∞—Ç—É
        
        Args:
            order_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
            amount: –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            callback_url: URL –¥–ª—è webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —Å URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
            
        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        """
        sign = self._generate_sign(order_id, amount)
        
        params = {
            'client_id': self.client_id,
            'order_id': order_id,
            'amount': amount,
            'sign': sign
        }
        
        if callback_url:
            params['callback_url'] = callback_url
        
        try:
            logging.info(f"üì° APays —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: order_id={order_id}, amount={amount} –∫–æ–ø–µ–µ–∫")
            
            response = self.session.get(f"{self.base_url}/backend/create_order", params=params)
            response.raise_for_status()
            result = response.json()
            
            logging.info(f"‚úÖ APays –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: {result}")
            return result
            
        except requests.exceptions.RequestException as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ APays: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ APays: {e}")
        except json.JSONDecodeError as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ APays: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ APays: {e}")
    
    def get_order_status(self, order_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞
            
        Returns:
            –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            
        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        """
        sign = self._generate_sign(order_id)
        
        params = {
            'client_id': self.client_id,
            'order_id': order_id,
            'sign': sign
        }
        
        try:
            logging.info(f"üì° APays –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: order_id={order_id}")
            
            response = self.session.get(f"{self.base_url}/backend/get_order", params=params)
            response.raise_for_status()
            result = response.json()
            
            logging.info(f"‚úÖ APays —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {result}")
            return result
            
        except requests.exceptions.RequestException as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ APays: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ APays: {e}")
        except json.JSONDecodeError as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ APays: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ APays: {e}")
    
    def verify_webhook_signature(self, order_id: str, status: str, sign: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å webhook
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞
            status: –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            sign: –ü–æ–¥–ø–∏—Å—å –∏–∑ webhook
            
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–µ—Ä–Ω–∞
        """
        expected_sign = hashlib.md5(f"{order_id}:{status}:{self.secret_key}".encode('utf-8')).hexdigest()
        return sign == expected_sign
    
    def process_webhook(self, webhook_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç APays
        
        Args:
            webhook_data: –î–∞–Ω–Ω—ã–µ webhook
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            order_id = webhook_data.get('order_id')
            status = webhook_data.get('status')
            sign = webhook_data.get('sign')
            
            logging.info(f"üì® APays webhook: order_id={order_id}, status={status}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
            if not self.verify_webhook_signature(order_id, status, sign):
                logging.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook APays: {order_id}")
                return {
                    'success': False,
                    'message': 'Invalid signature'
                }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            if status == 'approved':
                logging.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ APays –æ–¥–æ–±—Ä–µ–Ω: {order_id}")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                
            elif status == 'declined':
                logging.info(f"‚ùå –ü–ª–∞—Ç–µ–∂ APays –æ—Ç–∫–ª–æ–Ω–µ–Ω: {order_id}")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                
            return {
                'success': True,
                'message': 'Webhook processed successfully',
                'order_id': order_id,
                'status': status
            }
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ APays webhook: {e}")
            return {
                'success': False,
                'message': f'Error processing webhook: {e}'
            }
    
    def rubles_to_kopecks(self, rubles: float) -> int:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä—É–±–ª–∏ –≤ –∫–æ–ø–µ–π–∫–∏
        
        Args:
            rubles: –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
            
        Returns:
            –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        """
        return int(rubles * 100)
    
    def kopecks_to_rubles(self, kopecks: int) -> float:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏
        
        Args:
            kopecks: –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            
        Returns:
            –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
        """
        return kopecks / 100


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    apays = APaysPayment(
        client_id=123,  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à client_id
        secret_key="your_secret_key_here"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à secret_key
    )
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        order_id = f"order_{int(time.time())}"
        amount_kopecks = apays.rubles_to_kopecks(100.0)  # 100 —Ä—É–±–ª–µ–π
        
        order = apays.create_order(
            order_id=order_id,
            amount=amount_kopecks,
            callback_url="https://your-domain.com/webhook/apays"
        )
        print(f"–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: {order}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        status = apays.get_order_status(order_id)
        print(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {status}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


